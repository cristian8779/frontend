import 'dart:convert';
import 'package:http/http.dart' as http;

class PasswordService {
  final String baseUrl = 'https://api.soportee.store/api/password';
  String? message;

  /// Oculta informaci√≥n sensible en los logs
  String _sanitize(String value, {int visibleChars = 3}) {
    if (value.isEmpty) return '***';
    if (value.length <= visibleChars) return '***';
    return '${value.substring(0, visibleChars)}***';
  }

  /// Oculta email mostrando solo inicio y dominio
  String _sanitizeEmail(String email) {
    if (!email.contains('@')) return _sanitize(email);
    final parts = email.split('@');
    return '${_sanitize(parts[0], visibleChars: 2)}@${parts[1]}';
  }

  // Enviar c√≥digo al correo
  Future<bool> sendPasswordResetEmail(String email) async {
    print("üì® Solicitando c√≥digo de recuperaci√≥n");
    print("   ‚Ä¢ Email: ${_sanitizeEmail(email.trim())}");
    
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/forgot-password'),
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({"email": email.trim()}),
      );

      print("üì• Respuesta recibida - Status: ${response.statusCode}");

      if (response.statusCode == 200) {
        final data = _decodeResponse(response.body);
        message = data['mensaje'];
        print("‚úÖ C√≥digo enviado exitosamente");
        return true;
      } else {
        final data = _decodeResponse(response.body);
        message = data['mensaje'] ?? "No pudimos enviar el c√≥digo.";
        print("‚ùå Error al enviar c√≥digo - Status: ${response.statusCode}");
        if (data['mensaje'] != null) {
          print("   ‚Ä¢ Mensaje: ${data['mensaje']}");
        }
        return false;
      }
    } catch (e) {
      message = "Error al enviar c√≥digo: $e";
      print("‚ùå Excepci√≥n en sendPasswordResetEmail: ${e.toString()}");
      return false;
    }
  }

  // Verificar c√≥digo enviado al correo
  Future<bool> verificarCodigo(String email, String codigo) async {
    print("üß© Verificando c√≥digo de recuperaci√≥n");
    print("   ‚Ä¢ Email: ${_sanitizeEmail(email.trim())}");
    print("   ‚Ä¢ C√≥digo: ${_sanitize(codigo.trim(), visibleChars: 2)}");
    
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/verificar-codigo'),
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({
          "email": email.trim(),
          "codigo": codigo.trim(),
        }),
      );

      print("üì• Respuesta recibida - Status: ${response.statusCode}");

      if (response.statusCode == 200) {
        final data = _decodeResponse(response.body);
        message = data['mensaje'];
        print("‚úÖ C√≥digo verificado correctamente");
        return true;
      } else {
        final data = _decodeResponse(response.body);
        message = data['mensaje'] ?? "C√≥digo inv√°lido o expirado.";
        print("‚ùå Error en verificaci√≥n - Status: ${response.statusCode}");
        if (data['mensaje'] != null) {
          print("   ‚Ä¢ Mensaje: ${data['mensaje']}");
        }
        return false;
      }
    } catch (e) {
      message = "Error al verificar el c√≥digo: $e";
      print("‚ùå Excepci√≥n en verificarCodigo: ${e.toString()}");
      return false;
    }
  }

  // Restablecer la contrase√±a (requiere email, c√≥digo y nueva contrase√±a)
  Future<bool> resetPassword(String email, String codigo, String nuevaPassword) async {
    print("üîÅ Restableciendo contrase√±a");
    print("   ‚Ä¢ Email: ${_sanitizeEmail(email.trim())}");
    print("   ‚Ä¢ C√≥digo: ${_sanitize(codigo.trim(), visibleChars: 2)}");
    print("   ‚Ä¢ Nueva contrase√±a: [OCULTA - ${nuevaPassword.trim().length} caracteres]");
    
    try {
      final response = await http.post(
        Uri.parse('$baseUrl/reset-password'),
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({
          "email": email.trim(),
          "codigo": codigo.trim(),
          "nuevaPassword": nuevaPassword.trim()
        }),
      );

      print("üì• Respuesta recibida - Status: ${response.statusCode}");

      if (response.statusCode == 200) {
        final data = _decodeResponse(response.body);
        message = data['mensaje'];
        print("‚úÖ Contrase√±a restablecida exitosamente");
        return true;
      } else {
        final data = _decodeResponse(response.body);
        message = data['mensaje'] ?? "No se pudo cambiar la contrase√±a.";
        print("‚ùå Error al restablecer - Status: ${response.statusCode}");
        if (data['mensaje'] != null) {
          print("   ‚Ä¢ Mensaje: ${data['mensaje']}");
        }
        return false;
      }
    } catch (e) {
      message = "Error al restablecer contrase√±a: $e";
      print("‚ùå Excepci√≥n en resetPassword: ${e.toString()}");
      return false;
    }
  }

  // Funci√≥n auxiliar para decodificar JSON de forma segura
  Map<String, dynamic> _decodeResponse(String body) {
    try {
      return body.isNotEmpty ? jsonDecode(body) as Map<String, dynamic> : {};
    } catch (_) {
      return {};
    }
  }
}