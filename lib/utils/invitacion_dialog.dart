import 'package:flutter/material.dart';
import '../services/rol_service.dart'; // Ajusta la ruta seg√∫n tu proyecto

Future<void> mostrarInvitacionDialog(BuildContext context) async {
  final rolService = RolService();

  try {
    // üîπ Consulta al backend si hay invitaci√≥n pendiente
    final invitacion = await rolService.verificarInvitacionPendiente();

    // Verificar si realmente hay una invitaci√≥n pendiente
    if (!(invitacion["pendiente"] ?? false)) {
      return; // No hay invitaci√≥n ‚Üí no muestra nada
    }

    // üîπ Verificar que el contexto siga montado antes de mostrar el di√°logo
    if (!context.mounted) return;

    // üîπ Si hay invitaci√≥n, muestra el di√°logo
    final resultado = await showDialog<bool>(
      context: context,
      barrierDismissible: false, // Evita cerrar tocando fuera del di√°logo
      builder: (BuildContext dialogContext) {
        return WillPopScope(
          onWillPop: () async => false, // Evita cerrar con el bot√≥n de atr√°s
          child: AlertDialog(
            title: const Text("Invitaci√≥n a Administrador"),
            content: const Text(
              "Tienes una invitaci√≥n pendiente para convertirte en administrador. "
              "Si aceptas, deber√°s ingresar el c√≥digo de confirmaci√≥n."
            ),
            actions: [
              TextButton(
                child: const Text("Cancelar"),
                onPressed: () async {
                  // Cerrar el di√°logo primero y retornar false
                  Navigator.of(dialogContext).pop(false);
                  
                  try {
                    await rolService.rechazarInvitacion();
                  } catch (e) {
                    print("‚ùå Error al rechazar invitaci√≥n: $e");
                  }
                },
              ),
              ElevatedButton(
                child: const Text("Aceptar"),
                onPressed: () {
                  // Cerrar el di√°logo y retornar true
                  Navigator.of(dialogContext).pop(true);
                },
              ),
            ],
          ),
        );
      },
    );

    // üîπ Esperar a que el di√°logo se cierre completamente
    await Future.delayed(const Duration(milliseconds: 100));

    // üîπ Verificar que el contexto siga montado despu√©s del di√°logo
    if (!context.mounted) return;

    // üîπ Manejar el resultado despu√©s de cerrar el di√°logo
    if (resultado == true) {
      // Usuario acept√≥ la invitaci√≥n
      Navigator.pushNamed(context, '/pantalla-rol');
    } else if (resultado == false) {
      // Usuario cancel√≥ la invitaci√≥n
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text("Invitaci√≥n rechazada"),
          backgroundColor: Colors.red,
          duration: Duration(seconds: 2),
        ),
      );
    }
  } catch (e) {
    print("‚ùå Error verificando invitaci√≥n: $e");
  }
}